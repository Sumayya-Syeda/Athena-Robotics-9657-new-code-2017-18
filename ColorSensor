package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.NormalizedColorSensor;
import com.qualcomm.robotcore.hardware.NormalizedRGBA;
import com.qualcomm.robotcore.hardware.SwitchableLight;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.sun.source.tree.SwitchTree;

/**
 * Created by school on 1/21/18.
 */

public class ColorSensor extends LinearOpMode { //works on a separate thread
    private ElapsedTime runTime = new ElapsedTime();
    com.qualcomm.robotcore.hardware.ColorSensor sensorColor;
    CRServo button1;
    CRServo button2;
    String c;

    NormalizedColorSensor colorSensor;
    View relativeLayout;

    public ColorSensor(String clr) {
        c = clr;

    }

    public void runOpMode() {
        //detectColor();
        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayor", "id", hardwareMap.appContext.getPackageName());
        relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);


        try {
            runSample(); // actually execute the sample
        } catch (InterruptedException e) {
            e.printStackTrace();
        } finally{
            // On the way out, *guarantee* that the background is reasonable. It doesn't actually start off
            // as pure white, but it's too much work to dig out what actually was used, and this is good
            // enough to at least make the screen reasonable again.
            // Set the panel back to the default color
            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.WHITE);
                }
            });
        }

    }



    protected void runSample() throws InterruptedException{

        float[] hsvValues = new float[3];
        final float values [] = hsvValues;

        boolean bPrevState = false;
        boolean bCurrState = false;

        colorSensor = hardwareMap.get(NormalizedColorSensor.class, "sensor_color");

        if(colorSensor instanceof SwitchableLight){
            ((SwitchableLight)colorSensor).enableLight((true));
        }

        waitForStart();

        while(opModeIsActive()){
            bCurrState = gamepad1.x;
            if(bCurrState != bPrevState) {
                if (bCurrState) {
                    if (colorSensor instanceof SwitchableLight) {
                        SwitchableLight light = (SwitchableLight) colorSensor;
                        light.enableLight(!light.isLightOn());
                    }
                }
            }
            bPrevState = bCurrState;

            NormalizedRGBA colors = colorSensor.getNormalizedColors();

            Color.colorToHSV(colors.toColor(), hsvValues);

            telemetry.addLine()
                    .addData("H", "%.3f", hsvValues[0])
                    .addData("S", "%.3f", hsvValues[1])
                    .addData("V", "%.3f", hsvValues[2]);
            telemetry.addLine()
                    .addData("a", "%.3f", colors.alpha)
                    .addData("r", "%.3f", colors.red)
                    .addData("g", "%.3f", colors.green)
                    .addData("b", "%.3f", colors.blue);

            /** We also display a conversion of the colors to an equivalent Android color integer.
             * @see Color */
            int color = colors.toColor();
            telemetry.addLine("raw Android color: ")
                    .addData("a", "%02x", Color.alpha(color))
                    .addData("r", "%02x", Color.red(color))
                    .addData("g", "%02x", Color.green(color))
                    .addData("b", "%02x", Color.blue(color));

            float max = Math.max(Math.max(Math.max(colors.red, colors.green), colors.blue), colors.alpha);
            colors.red /= max;
            colors.green /= max;
            colors.blue /= max;
            color = colors.toColor();

            telemetry.addLine("normalized color:  ")
                    .addData("a", "%02x", Color.alpha(color))
                    .addData("r", "%02x", Color.red(color))
                    .addData("g", "%02x", Color.green(color))
                    .addData("b", "%02x", Color.blue(color));
            telemetry.update();

            Color.RGBToHSV(Color.red(color), Color.green(color), Color.blue(color), hsvValues);



            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));
                }
            });

        }
    }

    public void detectColor(){
        float hsvValues[] = {0F, 0F, 0F};
        final float values[] = hsvValues; // can never directly set
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(R.id.RelativeLayout);
        int colorVal = 2;
        // create instance of the objects with the values from hardware map
        sensorColor = hardwareMap.colorSensor.get("sensorColor");
        button1 = hardwareMap.crservo.get("button1");
        button2 = hardwareMap.crservo.get("button2");
        telemetry.addData("Initialization", "Complete");
        button1.setPower(0);
        button2.setPower(0);

        int b = 1;

        waitForStart();
        while(opModeIsActive()){
            //convert the color sensed to hsv to get hue, saturationa and brightiness values, put these values into an array
            Color.RGBToHSV(sensorColor.red() * 8, sensorColor.blue() * 8, sensorColor.green(), hsvValues);

            //add to telemetry to see the values the color sensor is reading
            telemetry.addData("Red: ", sensorColor.red());
            telemetry.addData("Blue: ", sensorColor.blue());
            telemetry.addData("Green: ", sensorColor.green());
            telemetry.update();

            button1.setPower(0);
            button2.setPower(0);

            if (c.equals("red")) {
                //find values that equal to red; use this for checking if color sensor is reading the color we want
                //set colorVal here
            }else{
                //find values that equal to blue
                //set colorVal here
            }

            /* this is code that does stuff when detecting the indicated color*/
            if(sensorColor.red() > colorVal && b==1){
                button1.setPower(0.25);
                sleep(1500); //dont run this code for 1500 ms
                button1.setPower(-0.25);
                sleep(1500);

                b = 2; //change button(aka the servo)
            }else if(sensorColor.red() < colorVal && b==2){
                button1.setPower(0.25);
                sleep(1500); //dont run this code for 1500 ms
                button1.setPower(-0.25);
                sleep(1500);

                b = 1; //change button(aka the servo)
            }else{
                button1.setPower(0);
                button2.setPower(0);
            }

        }
        telemetry.update();
        idle();
    }

}
